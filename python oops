{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0d626dc4",
   "metadata": {},
   "source": [
    "Q1. What is the purpose of Python's OOP?\n",
    "\n",
    "\n",
    "\n",
    "    Python's oop purpose is creaating resuable code and implement real world like entities inhertiance polymorphism ,enscapulation in programmming.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07c225be",
   "metadata": {},
   "source": [
    "Q2. Where does an inheritance search look for an attribute?\n",
    "\n",
    "    An inheritance search looks for an attribute first  in the instance object then in the class the instance was created from and the all higher classes ,from left to right. The search stops at first place where attribute found.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6ecb861",
   "metadata": {},
   "source": [
    "Q3. How do you distinguish between a class object and an instance object?\n",
    "    \n",
    "    class object are created for the whole class.\n",
    "    Instance object is created for the instance that time.\n",
    "    \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69de31d3",
   "metadata": {},
   "source": [
    "Q4. What makes the first argument in a class’s method function special?\n",
    "\n",
    "    The calling process is automatic while the receiving process is not. This is the reason the first parameter     of a function in class must be the object itself. Writing this parameter as self is merely a convention\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c57ef222",
   "metadata": {},
   "source": [
    "Q5. What is the purpose of the init method?\n",
    "\n",
    "\n",
    "    The purpose of init method is to initliaze the object's attributeswithin the class.\n",
    "    \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c2cee84",
   "metadata": {},
   "source": [
    "Q6. What is the process for creating a class instance?\n",
    "\n",
    "    To create instances of a class, you call the class using class name and pass in whatever arguments.\n",
    "    A class can be   instantiated by calling the class using the class name.\n",
    "\n",
    "    example\n",
    "    <object-name> = <class-name>(<arguments>)    \n",
    "    \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b9668f3",
   "metadata": {},
   "source": [
    "Q7. What is the process for creating a class?\n",
    "\n",
    "    We can create class by using keyword class and followed by classname.\n",
    "    \n",
    "    Example:-\n",
    "    \n",
    "    class <ClassName>:\n",
    "    \n",
    "        #statement_suite \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f131b8f",
   "metadata": {},
   "source": [
    "Q8. How would you define the superclasses of a class?\n",
    "\n",
    "    Superclass is the class from where all subclasses inherit attributes and code.\n",
    "\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6177141",
   "metadata": {},
   "source": [
    "Q9. What is the relationship between classes and modules?\n",
    "\n",
    "    Modules are python conataining pythom statements and definition So a module in python is simply a way to organize the code,  and it contains either python classes or just functions and can be import them .Classes are blueprints that allow you to create instances with attributes and bound functionality. Classes support inheritance, metaclasses, and descriptors.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2217e31b",
   "metadata": {},
   "source": [
    "Q10. How do you make instances and classes?\n",
    "     \n",
    "     To create instances of a class, you call the class using class name and pass in whatever arguments.\n",
    "\n",
    "      We can create class by using keyword class and followed by classname.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a379d40b",
   "metadata": {},
   "source": [
    "Q11. Where and how should be class attributes created?\n",
    "    \n",
    "    Class attributes should created outside the __init__ method.\n",
    "    Use class_name. class_attribute or object_name. class_attribute to access the value of the class_attribute .\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "acd62079",
   "metadata": {},
   "source": [
    "Q12. Where and how are instance attributes created?\n",
    "\n",
    "     Instance attributes are defined in the constructor. Defined directly inside a class. Defined inside a constructor using the self parameter."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf92e24d",
   "metadata": {},
   "source": [
    "Q13. What does the term \"self\" in a Python class mean?\n",
    "\n",
    "    After creating a class in Python, we need to access its attributes and methods. In Python, the word self is explicitly included as a first parameter of methods.It is pointer to the object and tells about the object.\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0147d8d9",
   "metadata": {},
   "source": [
    "Q14. How does a Python class handle operator overloading?\n",
    "     \n",
    "     Different opertators behave different with diffrent inputs.\n",
    "     Operator overloading is the process of using an operator in different ways depending on the operands\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9fbfbd6",
   "metadata": {},
   "source": [
    "Q15. When do you consider allowing operator overloading of your classes?\n",
    "\n",
    "     When the user want the diiferent outcomes without writing different functions.Operator overloading is the process of using  an operator in different ways depending on the operands\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13ba7d87",
   "metadata": {},
   "source": [
    "Q16. What is the most popular form of operator overloading?\n",
    "     \n",
    "     Most popular form of operator overloading is +(Addition) we can use add two numbers or conacatenate two strings.\n",
    "     \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca1f73dc",
   "metadata": {},
   "source": [
    "Q17. What are the two most important concepts to grasp in order to comprehend Python OOP code?\n",
    "     \n",
    "     The most important concepts to grasp in order to comprehend python oop code is inheritance and polymorphism.\n",
    "     these  two are used to write effective code.\n",
    "     \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ffa5300c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "7b38aaea",
   "metadata": {},
   "source": [
    "Q19. What happens if you don't do something extra to treat an exception?\n",
    "\n",
    "\n",
    "\n",
    "    The program terminates abruptly and the code past the line that caused the exception will not get executed."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cbef2a93",
   "metadata": {},
   "source": [
    "Q20. What are your options for recovering from an exception in your script?\n",
    "\n",
    "\n",
    "    You can use the catchError() script operation to catch exceptions in the scripting code, and take the required action that is based on the exception\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e328bb95",
   "metadata": {},
   "source": [
    "Q21. Describe two methods for triggering exceptions in your script.\n",
    "    \n",
    "    Type Error – Happens when an incorrect type of function or operation is applied to an object.\n",
    "    ZeroDivisionError: division by zero\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1d0a6ed",
   "metadata": {},
   "source": [
    "Q22. Identify two methods for specifying actions to be executed at termination time, regardless of\n",
    "whether or not an exception exists.\n",
    "\n",
    "    We can do this by writing in finally"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f79fa2b5",
   "metadata": {},
   "source": [
    "Q23 What is the purpose of the try statement in Python?\n",
    "\n",
    "    The try block lets you test a block of code for errors."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23b7312f",
   "metadata": {},
   "source": [
    "Q24. What are the two most popular try statement variations?\n",
    "         \n",
    "         Try/Except Variations.we have used a try / except and even a try / except / except  There are two other optional segments to a try block: else and finally ."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15c56bd4",
   "metadata": {},
   "source": [
    "Q25. What is the purpose of the raise statement?\n",
    "\n",
    "    The raise keyword is used to raise an exception."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "516dcdb0",
   "metadata": {},
   "source": [
    "Q26. What does the assert statement do, and what other statement is it like?\n",
    "\n",
    "    the assert keyword let you know test if a condition in your code returns True, if not, the program will raise an AssertionError.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed05010f",
   "metadata": {},
   "source": [
    "Q27. What is the purpose of the with/as argument, and what other statement is it like?\n",
    "        \n",
    "     . It simplifies the management of common resources like file streams. In Python, with statement is used in exception handling to make the code cleaner and much more readable. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d81a763",
   "metadata": {},
   "source": [
    "Q28. What are *args, **kwargs?\n",
    "\n",
    "     *args specifies the number of non-keyworded arguments that can be passed and the operations that can be performed on the function in Python\n",
    "     **kwargs is a variable number of keyworded arguments that can be passed to a function that can perform dictionary operations"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3a27a77",
   "metadata": {},
   "source": [
    "Q29. How can I pass optional or keyword parameters from one function to another?\n",
    "\n",
    "    To pass optional or keyword parameters from one function to another, collect the arguments using the * and ** specifiers in the function’s parameter.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e88a5b93",
   "metadata": {},
   "source": [
    "Q30. What are Lambda Functions\n",
    "\n",
    "    Lambda functions are intended as a shorthand for defining functions that can come in handy to write concise code without wasting multiple lines defining a function."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc14fac5",
   "metadata": {},
   "source": [
    "Q31. Explain Inheritance in Python with an example?\n",
    "        \n",
    "     Inheritance is the capability of one class to derive or inherit the properties from another class.\n",
    "     \n",
    "     example:\n",
    "     class A:\n",
    "     \n",
    "      def __init__(self, name, id):\n",
    "        self.name = name\n",
    "        self.id = id\n",
    " \n",
    "      def Display(self):\n",
    "        print(self.name, self.id)\n",
    "     \n",
    "     class B(A):\n",
    "     \n",
    "     def Print(self):\n",
    "    print(\"Emp class called\")\n",
    "     \n",
    "    Emp_details = Emp(\"Mayank\", 104)\n",
    "    Emp_details.Display()\n",
    "     \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e706fe2",
   "metadata": {},
   "source": [
    "Q32. Suppose class C inherits from classes A and B as class C(A,B).Classes A and B both have their own versions of method func(). If we call func() from an object of class C, which version gets invoked?\n",
    "\n",
    "    The version of A class invoked because in  python from left to right the versions start invoked.\n",
    "    \n",
    "            \n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4882569e",
   "metadata": {},
   "source": [
    "Q33. Which methods/functions do we use to determine the type of instance and inheritance?\n",
    "\n",
    "\n",
    "    Use isinstance() to check an instance’s type: isinstance(obj, int) will be True only if obj.__class__ is int or some class derived from int.\n",
    "\n",
    "    Use issubclass() to check class inheritance: issubclass(bool, int) is True since bool is a subclass of int. However, issubclass(float, int) is False since float is not a subclass of int."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "580100eb",
   "metadata": {},
   "source": [
    "Q34.Explain the use of the 'nonlocal' keyword in Python.\n",
    "\n",
    "    The nonlocal keyword is used to work with variables inside nested functions, where the variable should not belong to the inner function.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a19a58c4",
   "metadata": {},
   "source": [
    "Q35. What is the global keyword?\n",
    "\n",
    "\n",
    "\n",
    "    Python  the global keyword allows us to modify the variable outside of the current scope."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
